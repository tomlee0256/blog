---
layout: post
title:  "Web数据可视化浅析"
date:   2014-05-06 
categories: Data
---
![utf8]({{ site.url }}/assets/images/data-visualisation.jpg)	

##什么是数据可视化
---
简单的说就是以可视的方式展现数据的一种方法。
数据可视化具有科学的逻辑性，同时也蕴含了艺术的美学性。

##作用
---
* 使数据所传递的信息表达的更形象，更直观。

* 优秀的可视化展现方式可以揭示数据所包含的更深层次的内在联系。

##数据可视化Web实现浅析
---
**1.形式**

* 2D

2D绘制是数据可视化在Web端实现的主要形式，与传统的数据可视化形式和Web页面主要以2D方式呈现的特点相一致。
常见的各种二维图表既是。

* 3D

3D数据可视化最早出现在专门的绘图软件中，对数据的展现从平面二维上升到空间立体，丰富了描述数据特点的纬度和视觉效果。

随着各主流浏览器对WebGL的支持，Web页面也逐渐突破了二维绘图效果的限制，为Web端3D数据可视化提供了广阔想像和发挥空间。
[暂举一例](http://www.georgeandjonathan.com/)

**2.技术**

* SVG

SVG简单的说是浏览器端展现矢量图形的一类DOM结构，直接由标签及其属性定义图形，同时支持CSS对图形样式的修饰（因为图形本身就是DOM）。
特点是操作简单，数据的展现在页面与其他DOM元素结合灵活，方便。

常用库有:[D3](http://d3js.org/), [gRaphael](http://g.raphaeljs.com/)等.

* Canvas

Canvas是HTML5中薪定义端DOM元素，主要用于图形绘制。
特点是为操作者提供了最基础的绘图接口，和Canvas数据操作接口，极大的提高了数据可视化的操作空间和自由度。

常用库有：[Processing](http:// processingjs.org/), [Paper.js](http:// paperjs.org/)等.

* WebGL

WebGL简单的说是OpenGL在Web端的实现版本，主要用于3D图形在Web页面的展现。
特点是为数据可视化提供了三维展示的渲染效果，同时也为GPU在数据可视化中提供了广阔的发挥空间。

常用库有：[Threejs](threejs.org), [tdl](https://github.com/greggman/tdl)等.

**3.实现步骤**

* 呈现布局；

实际操作表现为：draw(), rect(), circle(), path()等。

* 修饰外观；

实际操作表现为：fill(), stroke()等。

* 操作交互：

实际操作表现为：onMouseDown(), onMouseOver()等。

**4.设计思想**

* 数据驱动

数据驱动的数据可视化是以数据为中心的一种可视化实现方式，由数据驱动绘制，主要体现为d3.js的设计与实现。

* 图形驱动

是相对数据驱动而言的一种普遍使用的数据可视化方式，这里没有严格的界定，只是相对数据驱动的一种简单的区分。





<br/>
##更多阅读




















